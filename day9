-------- ====== ****   merge(병합)   **** ====== --------
   -- 어떤 2개 이상의 테이블에 존재하는 데이터를 다른 테이블 한곳으로 모으는것(병합)이다.
   
   1. 탐색기에서 C:\oraclexe\app\oracle\product\11.2.0\server\network\ADMIN 에 간다.
   
   2. tnsnames.ora 파일을 메모장으로 연다.
   
   3. TEACHER =
      (DESCRIPTION =
        (ADDRESS = (PROTOCOL = TCP)(HOST = 211.238.142.72)(PORT = 1521))
        (CONNECT_DATA =
          (SERVER = DEDICATED)
          (SERVICE_NAME = XE)
        )
      )
     을 추가한다.
     HOST = 211.238.142.72 이 연결하고자 하는 원격지 오라클서버의 IP 주소이다.
     그런데 전제조건은 원격지 오라클서버(211.238.142.72)의 방화벽에서 포트번호 1521 을 허용으로 만들어주어야 한다.
     
     그리고 TEACHER 를 'Net Service Name 네트서비스네임(넷서비스명)' 이라고 부른다.
     
     
   4. 명령프롬프트를 열어서 원격지 오라클서버(211.238.142.72)에 연결이 가능한지 테스트를 한다. 
      C:\Users\sist>tnsping TEACHER 5

        Used TNSNAMES adapter to resolve the alias
        Attempting to contact (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 211.238.142.72)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = XE)))
        OK (0 msec)
        OK (40 msec)
        OK (10 msec)
        OK (30 msec)
        OK (20 msec)
        
        
    5.  데이터베이스 링크(database link) 만들기
    
    create database link teacherServer
    connect to hr identified by cclass   -- 이때 hr 과 암호 cclass 는 연결하고자 하는 원격지 오라클서버(211.238.142.72)의 계정명과 암호 이다. 
    using 'TEACHER';  -- TEACHER 는 Net Service Name 네트서비스네임(넷서비스명) 이다.
    -- Database link TEACHERSERVER이(가) 생성되었습니다.    
    
    
    update employees set first_name = '환모', last_name = '정'
    where employee_id = 100; --- Steven King
    -- 1 행 이(가) 업데이트되었습니다.
    
    commit;
    -- 커밋 완료.
    
    select * 
    from employees -- 로컬서버
    order by employee_id;
    
    select * 
    from employees@XE -- 원래는 이렇게 쓰는게 원칙 / 로컬서버
    order by employee_id;
    
    select * 
    from employees@teacherServer -- 원격지 오라클서버(211.238.142.72)  / 테이블명@DB링크
    order by employee_id;
    
    --- **** 생성되어진 데이터베이스 링크를 조회해봅니다. **** ---
    
    select *
    from user_db_links;
    /*
        ---------------------------------------------------------
        DB_LINK         USERNAME    PASSWORD     HOST    CREATED
        ----------------------------------------------------------
        TEACHERSERVER	    HR		 NULL      TEACHER	 22/01/14
                                            -- TEACHER 는 Net Service Name이다.
    */
    
    --- **** 생성되어진 데이터베이스 링크를 삭제해봅니다. **** ---
    drop database link BONJUM;
    -- Database link BONJUM(가) 삭제되었습니다.
    
    create database link bonjumlink
    connect to hr identified by cclass   -- 이때 hr 과 암호 cclass 는 연결하고자 하는 원격지 오라클서버(211.238.142.72)의 계정명과 암호 이다. 
    using 'TEACHER';
    -- Database link BONJUMLINK이(가) 생성되었습니다.
    
    -- 각 지점은 tbl_reservation_jeonghwanmo 이라는 테이블을 생성한다.
    drop table tbl_reservation_jeonghwanmo purge;
    -- Table TBL_RESERVATION_JEONGHWANMO이(가) 삭제되었습니다.
        
        
    create table tbl_reservation_jeonghwanmo
    (rsvno       varchar2(20)    -- 예약고유번호
    ,memberid    varchar2(20)    -- 회원ID
    ,ticketcnt   number          -- 티켓개수
    ,constraint PK_tbl_reservation_jeonghwanmo primary key(rsvno) -- 이 컬럼에는 고유한 값만 들어온다라는 뜻
    );
    -- Table TBL_RESERVATION_JEONGHWANMO이(가) 생성되었습니다.
    
    insert into tbl_reservation_jeonghwanmo(rsvno, memberid, ticketcnt)
    values('jeonghwanmo001', '정환모', 2);
    
    commit;
    
    
    -- 아래는 본점DB서버(샘PC)에서만 하는 것이다.
    create table tbl_reservation_merge
    (rsvno       varchar2(20)    -- 예약고유번호
    ,memberid    varchar2(20)    -- 회원ID
    ,ticketcnt   number          -- 티켓개수
    ,constraint PK_tbl_reservation_merge primary key(rsvno)
    );
    -- Table TBL_RESERVATION_MERGE이(가) 생성되었습니다.
    
    select *
    from tbl_reservation_merge; -- 샘이 하는것
    
    select *
    from tbl_reservation_merge@bonjumlink; -- 여러분들이 하는 것
    
    select * 
    from tbl_reservation_jeonghwanmo;
    
    -- 아래는 우리가(지사) 하는 것.
    
    merge into tbl_reservation_merge@bonjumlink R
    using tbl_reservation_jeonghwanmo L
    on (L.rsvno = R.rsvno)
    when matched then
        update set R.memberid = L.memberid
                 , R.ticketcnt = L.ticketcnt
    when not matched then
        insert (rsvno, memberid, ticketcnt) values(L.rsvno, L.memberid, L.ticketcnt);
        
    -- 1 행 이(가) 병합되었습니다.
    
    commit;
    -- 커밋 완료.
    
    -- rollback;
    
    select *
    from tbl_reservation_merge@bonjumlink; -- 여러분들이 하는 것
    
    select * 
    from tbl_reservation_jeonghwanmo;
    
    --------------------------------------------------------------------------------
    
    update tbl_reservation_jeonghwanmo set memberid = 'Jeong H.M', ticketcnt = 9
    where rsvno = 'jeonghwanmo001';
    -- 1 행 이(가) 업데이트되었습니다.

    commit;
    -- 커밋 완료.
    
    merge into tbl_reservation_merge@bonjumlink R
    using tbl_reservation_jeonghwanmo L
    on (L.rsvno = R.rsvno)
    when matched then
        update set R.memberid = L.memberid
                 , R.ticketcnt = L.ticketcnt
    when not matched then
        insert (rsvno, memberid, ticketcnt) values(L.rsvno, L.memberid, L.ticketcnt);
    -- 1 행 이(가) 병합되었습니다.
        
    commit;
    -- 커밋 완료.
    
    select *
    from tbl_reservation_merge@bonjumlink;
    ---------- 하나 더 넣기----------------
    insert into tbl_reservation_jeonghwanmo(rsvno, memberid, ticketcnt)
    values('jeonghwanmo002', '정환모2', 10);
    
    commit;

    merge into tbl_reservation_merge@bonjumlink R
    using tbl_reservation_jeonghwanmo L
    on (L.rsvno = R.rsvno)
    when matched then
        update set R.memberid = L.memberid
                 , R.ticketcnt = L.ticketcnt
    when not matched then
        insert (rsvno, memberid, ticketcnt) values(L.rsvno, L.memberid, L.ticketcnt);
    -- 1 행 이(가) 병합되었습니다.
        
    commit;
    -- 커밋 완료.

    select *
    from tbl_reservation_merge@bonjumlink
    order by 1;
    
    -------- **** 데이터 정의어(DDL == Data Defination Language) **** ---------
    ==> DDL : create, drop, alter, truncate 
    --> 여기서 중요한 것은 DDL 문을 실행을 하면 자동적으로 commit; 이 되어진다.
    --  즉, auto commit 되어진다.
    
    select *
    from employees
    where employee_id = 100;
    -- salary ==> 24000
    -- email ==> SKING
    
    update employees set salary = 50000, email = 'gogogogogo'
    where employee_id = 100;
    -- 1 행 이(가) 업데이트되었습니다.
    
    create table tbl_imsi
    (no     number
    ,name   varchar2(20)
    );
    -- Table TBL_IMSI이(가) 생성되었습니다.
    
    -- DDL 문을 실행했으므로 자동적응로 commit; 이 되어진다.
    
    select *
    from employees
    where employee_id = 100;
    
    rollback;
    -- 롤백 완료.
    
    select *
    from employees
    where employee_id = 100;
    -- 위에서 DDL문(create)을 실행했으므로 자동적으로 commit; 이 되었기 때문에
    -- rollback이 안 됨.
    
    update employees set salary = 24000
                       , email = 'SKING'
                       , first_name = 'Steven'
                       , last_name = 'King'
    where employee_id = 100;
    -- 1 행 이(가) 업데이트되었습니다.
    
    commit;
    
    select *
    from employees
    where employee_id = 100;
    -- DDL 문 실행 후 ROLLBACK 해봐야 소용없으니 조심해라!!!
    
    ------ ====== **** TRUNCATE table 테이블명; **** ====== ------  
    --> TRUNCATE table 테이블명; 을 실행하면 테이블명 에 존재하던 모든 행(row)들을 삭제해주고,
    --  테이블명에 해당하는 테이블은 완전초기화 가 되어진다.
    --  중요한 사실은 TRUNCATE table 테이블명; 은 DDL 문이기에 auto commit; 되어지므로 rollback 이 불가하다.
   
    --  delete from 테이블명; 을 실행하면 이것도 테이블명 에 존재하던 모든 행(row)들을 삭제해준다.
    --  이것은 DML문 이므로 rollback 이 가능하다.
    
    create table tbl_emp_copy_1
    as
    select * from employees;
    -- Table TBL_EMP_COPY_1이(가) 생성되었습니다.
    
    select *
    from tbl_emp_copy_1;
    
    delete from tbl_emp_copy_1;
    -- 107개 행 이(가) 삭제되었습니다.
    
    select count(*)
    from tbl_emp_copy_1;
    
    rollback;
    -- 롤백 완료.
    
    select count(*)
    from tbl_emp_copy_1; -- 107
    
    truncate table tbl_emp_copy_1;
    -- Table TBL_EMP_COPY_1이(가) 잘렸습니다.
    
    select *
    from tbl_emp_copy_1;
    
    select count(*)
    from tbl_emp_copy_1;
    
    rollback; -- auto commit; 이 되어졌으므로 rollback 해봐야 소용 없다.
    -- 롤백 완료.
    
    
    
    
    
    -------- **** 데이터 제어어(DCL == Data Control Language) **** ---------
    /*
    ==> DCL : grant(권한 부여하기), revoke(권한 회수하기)
    --> 여기서 중요한 것은 DCL 문을 실행하면 auto commit; 이 되어진다.
    grant 권한 to 대상
    revoke 권한 from 대상
    */
    
    
    ---- *** SYS 또는 SYSTEM 에서 아래와 같은 작업을 한다. 시작 *** ----
    show user;
    -- USER이(가) "SYS"입니다. (우측 상단 local_sys로 변경 후)
    
    -- orauser1 이라는 오라클 일반사용자 계정을 생성하는데, 암호는 cclass 이다.
    create user orauser1 identified by cclass default tablespace users;
    -- User ORAUSER1이(가) 생성되었습니다.
    
    -- 생성되어진 오라클 일반사용자 계정인 orauser1 에게 오라클서버에 접속이 되어지고,
    -- 접속이 되어진 이후 테이블 등을 생성할 수 있는 권한을 부여해주겠다.
    grant connect, resource, unlimited tablespace to orauser1;
    -- Grant을(를) 성공했습니다.
    -- 이 명령어 이후 cmd에서 로그인(conn orauser1/cclass) 하면 로그인 성공됨.
    
    ---- *** SYS 또는 SYSTEM 에서 아래와 같은 작업을 한다. 종료 *** ----

    
    ---- *** HR에서 아래와 같은 작업을 한다. *** ----
    -- 우측 상단 local_hr 로 변경
    show user;
    -- USER이(가) "HR"입니다.
    
    select *
    from HR.employees; -- HR스키마
    
    select *
    from employees; 
    -- 현재 오라클 서버에 접속된 사용자(우측상단)가 HR 이므로 HR.employees 대신에 employees 을 쓰면 HR.employees로 인식함.
    
    select *
    from HR.employees;
    -- SYS는 관리자이기 때문에 위처럼 하면 볼 수 있다.
    
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 select 할 수 있도록 권한을 부여하겠습니다.
    grant select on employees to orauser1;
    -- Grant을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 update 할 수 있도록 권한을 부여하겠습니다.
    grant update on employees to orauser1;
    -- Grant을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 delete 할 수 있도록 권한을 부여하겠습니다.
    grant delete on employees to orauser1;
    -- Grant을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 delete 할 수 있도록 부여한 권한을 회수하겠습니다.
    revoke delete on employees from orauser1;
    -- Revoke을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 update 할 수 있도록 부여한 권한을 회수하겠습니다.
    -- update는 select 권한이 있어야 할 수 있음(순서상으로 그래야 하니까)
    revoke update on employees from orauser1;
    -- Revoke을(를) 성공했습니다.

    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 select 할 수 있도록 부여한 권한을 회수하겠습니다.
    revoke select on employees from orauser1;
    -- Revoke을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 select, update, delete 할 수 있도록 권한을 부여하겠습니다.
    grant select, update, delete on employees to orauser1;
    -- Grant을(를) 성공했습니다.
    
    -- orauser1 에게 HR이 자신의 소유인 employees 테이블에 대해 select, update, delete 할 수 있도록 부여한 권한을 회수하겠습니다.
    revoke select, update, delete on employees from orauser1;
    -- Revoke을(를) 성공했습니다.
    
    select *
    from employees;
    
    /*
        == Stored View 를 생성하는 이유 2가지 ==
        1. 복잡한 SQL문을 간단히 만들어서 추후에 재사용이 쉽게 하기 위함.
        2. 민감한 정보가 들어있는 텡이블에 있어서 공개할 행과 공개할 컬럼만 따로 만들어 
           Oracle 사용자에게 권한을 부여하기 위함.
    */
    
    create or replace view view_emp_3080
    as
    select employee_id, first_name, last_name, hire_date, salary, commission_pct
         , department_id, substr(jubun,1,6) AS BIRTHDAY
    from employees
    where department_id in (30, 50, 80);
    -- View VIEW_EMP_3080이(가) 생성되었습니다.
    
    grant select, update, delete on view_emp_3080 to orauser1;
    -- 테이블 전체에 대한 권한을 주는게 아니라 뷰를 하나 만들어서 뷰에 대한 권한을 준다(보안을 위해서)
    -- Grant을(를) 성공했습니다.
    
    

    
    ---- *** SYS 또는 SYSTEM 에서 아래와 같은 작업을 한다. 시작 *** ----
    
    show user;
    -- USER이(가) "SYS"입니다.
    
    grant create synonym to orauser1;
    -- Grant을(를) 성공했습니다.

    ---- *** SYS 또는 SYSTEM 에서 아래와 같은 작업을 한다. 종료 *** ----
    
    ---- *** Orauser1 에서 아래와 같은 작업을 한다. 시작 *** ----

    show user;
    
    select *
    from HR.view_emp_3080;
    
    --- ==== *** 시노님(Synonym, 동의어) *** ==== ---
    create or replace synonym emp for HR.view_emp_3080;
    -- ORA-01031: insufficient privileges => 권한 없음.
    
    -- SYS에서 synonym 권한 준 이후
    
    create or replace synonym emp for HR.view_emp_3080;
    -- Synonym EMP이(가) 생성되었습니다.
    
    select *
    from HR.view_emp_3080;
    
    select *
    from emp;
    
    --- *** 생성되어진 synonym 을 조회해본다. *** ---
    
    select *
    from user_synonyms;
    
    /*
        --------------------------------------------------------------
          SYNONYM_NAME    TABLE_OWNER     TABLE_NAME      DB_LINK
        --------------------------------------------------------------
             EMP	            HR	      VIEW_EMP_3080     NULL	
    
    */
    
    ---- *** Orauser1 에서 아래와 같은 작업을 한다. 종료 *** ----
    
    
    ---- *** HR 에서 아래와 같은 작업을 한다. 시작 *** ----
    show user;
    -- USER이(가) "HR"입니다.
