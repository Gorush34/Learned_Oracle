    ----------------------------------------------------------------------------------------------------------------------------------
    
    -- *** 요약값을 보여주는 rollup, cube, grouping sets, groupin 에 대해서 알아보자. ---
            ----- >>>>> 요약값(rollup, cube, grouping sets) <<<<< ------
  /*
      1. rollup(a,b,c) 은 grouping sets( (a,b,c),(a,b),(a),() ) 와 같다.
    
         group by rollup(department_id, gender) 은
         group by grouping sets( (department_id, gender), (department_id), () ) 와 같다.
  
      2. cube(a,b,c) 은 grouping sets( (a,b,c),(a,b),(b,c),(a,c),(a),(b),(c),() ) 와 같다.
 
         group by cube(department_id, gender) 은
         group by grouping sets( (department_id, gender), (department_id), (gender), () ) 와 같다.
         
         => rollup은 모두를 보여준 뒤 가장 마지막 요소부터 빼고 보여줌.
         => cube는 모든 경우의 수를 다 보여줌.
         => grouping set 는 내가 보고싶은 것만 볼 수 있음.
  */
    -- employees 테이블에서 부서번호별로 인원수를 나타내면서 동시에 전체인원수도 나타내세요. ---
    
    select department_id
         , count(*)
    from employees
    group by rollup(department_id);
    -- rollup(a) => a값이 일치하는 대상들을 묶어준다. 맨 밑의 null은 전체인원수.
    
    
    select department_id
         , grouping(department_id) 
         -- grouping(department_id) 은 결과값이 오로지 2개(0, 1)만 나온다. 
         -- 0은 department_id 컬럼의 값으로 그룹을 지었다는 뜻이고 1이라 함은 그룹을 안지었다는 말이다.
         , count(*)
    from employees
    group by rollup(department_id);
    
    
    
    select decode( grouping(department_id), '0', nvl( to_char(department_id), '인턴')
                                               , '전체') AS 부서번호
         , count(*)
    from employees
    group by rollup(department_id);
    -- 부서번호별로 rollup
    
    select decode( grouping(department_id), '0', nvl( to_char(department_id), '인턴')
                                               , '전체') AS 부서번호
         , count(*)
         , round( (count(*) / (select count(*) from employees) * 100), 1) AS 퍼센티지
    from employees
    group by rollup(department_id);
    -- 부서별 인원을 전체인원의 퍼센티지로 나타냄.
    
    
    
        -- employees 테이블에서 부서번호별, 성별로 인원수를 나타내면서 동시에 전체인원수도 나타내세요. ---
    /*
    ------------------------------
    부서번호    성별  인원수 퍼센티지
    ------------------------------   
      10        남    1
      10        여    1
      10        전체   2
      20        남    2
      20        여    2
      20        전체   4
                ...
      전체      남
                여
    
    */
    -- 문자열에서 ''은 null이고 ' ' 은 공백이다. 명백히 다륾!!!
    -- rollup 사용시 --
    
    select decode( grouping(V.department_id), 0, nvl(to_char(V.department_id), '부서없음'), 1, '전체') AS 부서번호
         , decode( grouping(V.GENDER), 0, V.GENDER, 1, '전체' ) AS 성별
         , count(*) AS 인원수
         , round( count(*) / (select count(*) from employees) * 100 , 1) AS 퍼센티지

    from
    (
    select department_id
         , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
    from employees
    ) V
    group by rollup(v.department_id, V.GENDER);
    ---------------------------------------
    --- grouping sets 사용시 ---
        select decode( grouping(V.department_id), 0, nvl(to_char(V.department_id), '부서없음'), 1, '전체') AS 부서번호
         , decode( grouping(V.GENDER), 0, V.GENDER, 1, '전체' ) AS 성별
         , count(*) AS 인원수
         , round( count(*) / (select count(*) from employees) * 100 , 1) AS 퍼센티지

    from
    (
    select department_id
         , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
    from employees
    ) V
    group by grouping sets((V.department_id, V.GENDER), V.department_id, ());
    
    
    ----------------------------------------------------------------------------------------------------------------------
    --- cube 사용시 ---
    select decode( grouping(V.department_id), 0, nvl(to_char(V.department_id), '부서없음'), 1, '전체') AS 부서번호
         , decode( grouping(V.GENDER), 0, V.GENDER, 1, '전체' ) AS 성별
         , count(*) AS 인원수
         , round( count(*) / (select count(*) from employees) * 100 , 1) AS 퍼센티지

    from
    (
    select department_id
         , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
    from employees
    ) V
    group by cube(v.department_id, V.GENDER)
    -- order by 1; 이걸로 하면 부서번호로 정렬이기때문에 부서번호는 문자 ==> 10, 100, 110, 20 순으로 정렬됨.
    order by V.department_id;
    
    
    --- grouping sets 사용시 ---
    select decode( grouping(V.department_id), 0, nvl(to_char(V.department_id), '부서없음'), 1, '전체') AS 부서번호
         , decode( grouping(V.GENDER), 0, V.GENDER, 1, '전체' ) AS 성별
         , count(*) AS 인원수
         , round( count(*) / (select count(*) from employees) * 100 , 1) AS 퍼센티지

    from
    (
    select department_id
         , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
    from employees
    ) V
    group by grouping sets( (v.department_id, V.GENDER), v.department_id, V.GENDER, () )
    order by V.department_id;
        
    -- grouping sets 에서 요소를 빼보자.
    select decode( grouping(V.department_id), 0, nvl(to_char(V.department_id), '부서없음'), 1, '전체') AS 부서번호
         , decode( grouping(V.GENDER), 0, V.GENDER, 1, '전체' ) AS 성별
         , count(*) AS 인원수
         , round( count(*) / (select count(*) from employees) * 100 , 1) AS 퍼센티지

    from
    (
    select department_id
         , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
    from employees
    ) V
    group by grouping sets( (v.department_id, V.GENDER), V.GENDER, () )
    order by V.department_id;
    
    ---------- ======= ****   having 그룹함수조건절   **** ======= ----------
   /*
       group by 절을 사용하여 그룹함수의 값을 나타내었을때
       그룹함수의 값이 특정 조건에 해당하는 것만 추출하고자 할때는 where 절을 사용하는 것이 아니라
       having 그룹함수조건절 을 사용해야 한다.
   */
   
   -- employees 테이블에서 사원이 10명 이상 근무하는 부서번호와 그 인원수를 나타내세요.
   
    select department_id, count(*)
    from employees
    where count(*) >= 10
    group by department_id;  -- 오류 
    
    select department_id AS 부서번호
         , count(*) AS 인원수
    from employees
    group by department_id
    having count(*) >= 10
    order by 2 desc;
    
    
        --- [퀴즈] employees 테이블에서 부서번호별로 월급의 합계를 나타내었을 때
   --        부서번호별 월급의 합계가 50000 이상인 부서에 대해서만
   --        부서번호, 월급의 합계를 나타내세요.
   
   select department_id AS 부서번호
        , to_char( sum(nvl( salary + (salary * commission_pct), salary) )
                   , '999,999') AS 월급
   from employees
   group by department_id
   having  sum(nvl( salary + (salary * commission_pct), salary) ) >= 50000
   order by 2 desc;
   
   
   ------- **** !!! 누적(누계)에 대해서 알아봅니다. !!! **** ---------
   /*
        sum(누적되어야할 컬럼명) over(order by 누적되어질 기준이 되는 컬럼명 asc[desc] )
        
        sum(누적되어야할 컬럼명) over(partition by 그룹화 되어질 컬럼명 
                                   order by 누적되어질 기준이 되는 컬럼명 asc[desc] )
   */
   
   create table tbl_panmae
     (panmaedate  date
     ,jepumname   varchar2(20)
     ,panmaesu    number
     );
   -- Table TBL_PANMAE이(가) 생성되었습니다.
   
     -- 명령어 한 문단씩만 실행할 것!!!!!!!!!
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-2), '새우깡', 10);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-2)+1, '새우깡', 15); 
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-2)+2, '감자깡', 20);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-2)+3, '새우깡', 10);
     
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-2)+3, '새우깡', 3);
     
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-1), '고구마깡', 7);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-1)+1, '새우깡', 8); 
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-1)+2, '감자깡', 10);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( add_months(sysdate,-1)+3, '감자깡', 5);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate - 4, '허니버터칩', 30);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate - 3, '고구마깡', 15);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate - 2, '고구마깡', 10);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate - 1, '허니버터칩', 20);
    
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '새우깡', 10);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '새우깡', 10);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '감자깡', 5);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '허니버터칩', 15);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '고구마깡', 20);
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '감자깡', 10); 
    
     insert into tbl_panmae(panmaedate, jepumname, panmaesu)
     values( sysdate, '새우깡', 10);
    
     commit;
     
     select *
     from tbl_panmae;
     
     
    -- *** tbl_panmae 테이블에서 '새우깡' 에 대한 일별 판매량과 일별누적판매량을 나타내세요.
     
    select to_char(panmaedate, 'yyyy-mm-dd hh24:mi:ss') AS panmaedate, panmaesu
    from tbl_panmae
    where jepumname = '새우깡';
    
    
    ----------------------------------------------------------
    판매일자            일별판매량       일별누적판매량
    ----------------------------------------------------------
    2021-11-10	        10              10
    2021-11-11	        15              25
    2021-11-13	        13              38
    2021-12-11	        8               46
    2022-01-10	        30              76
    -----------------------------------------------------------
    
    
    select to_char(panmaedate, 'yyyy-mm-dd') AS 판매일자
         , sum(panmaesu) AS 일별판매량
         -- , sum(누적되어야할 컬럼명) over(order by 누적되어질 기준이 되는 컬럼명 asc[desc] )
         , sum( sum(panmaesu) ) over(order by to_char(panmaedate, 'yyyy-mm-dd') asc) AS 일별누적판매량
    from tbl_panmae
    where jepumname = '새우깡'
    group by to_char(panmaedate, 'yyyy-mm-dd');
    
    
    -- *** tbl_panmae 테이블에서 모든 제품 에 대한 일별 판매량과 일별누적판매량을 나타내세요.
    ----------------------------------------------------------
    제품명     판매일자            일별판매량       일별누적판매량
    ----------------------------------------------------------
    새우깡     2021-11-10	            10              10
              2021-11-11	        15              25
              2021-11-13	        13              38
              2021-12-11	        8               46
              2022-01-10	        30              76
    감자깡     2021-11-12	            20	            20
              2021-12-12	        10	            30
              2021-12-13	        5	            35
              2022-01-10	        15	            50
    -----------------------------------------------------------
    

    select jepumname AS 제품명
         , to_char(panmaedate, 'yyyy-mm-dd') AS 판매일자
         , sum(panmaesu) AS 일별판매량
         -- sum(누적되어야할 컬럼명) over(partition by 그룹화 되어질 컬럼명 
         --                            order by 누적되어질 기준이 되는 컬럼명 asc[desc] )
         , sum( sum(panmaesu) ) over(partition by jepumname
                              order by to_char(panmaedate, 'yyyy-mm-dd') asc) AS 일별누적판매량
    from tbl_panmae
    group by jepumname, to_char(panmaedate, 'yyyy-mm-dd');
    
    
    
    create or replace view VIEW_NUKUKPANMAE
    as
    select JEPUMNAME 
         , to_char(panmaedate, 'yyyy-mm-dd') AS PANMAEDATE
         , sum(panmaesu) AS DAILY_SALES
         , sum( sum(panmaesu) ) over(partition by jepumname
                              order by to_char(panmaedate, 'yyyy-mm-dd') asc) AS DAILY_NUJUK_SALES
    from tbl_panmae
    group by jepumname, to_char(panmaedate, 'yyyy-mm-dd');
    
    select *
    from VIEW_NUKUKPANMAE
    where jepumname in('감자깡', '새우깡');
    
    --- *** [퀴즈] tbl_paname 테이블에서 판매일자가 1개월전 '01'일(즉, 현재가 2022년 1월 10일 이므로 2021년 12월 1일) 부터 판매된 
 --            모든 제품에 대해 일별판매량과 일별누적판매량을 나타내세요.. *** 
    -- 복습할 것(뭘 써야될지 몰라서 못함)
        
 

    select jepumname AS 제품명
             , to_char(panmaedate, 'yyyy-mm-dd') AS 판매일자
             , sum(panmaesu) AS 일별판매량
             , sum( sum(panmaesu) ) over(partition by jepumname
                                  order by to_char(panmaedate, 'yyyy-mm-dd') asc) AS 일별누적판매량
    from tbl_panmae 
    where panmaedate >= to_date( to_char(add_months(sysdate, -1), 'yyyy-mm') || '-01', 'yyyy-mm-dd')
    -- 또는 panmaedate >= last_day( add_months(sysdate, -2) ) +1
    group by jepumname, to_char(panmaedate, 'yyyy-mm-dd');
    
    
    -- 1개월 전을 나타내는 두가지 방법
    select sysdate
         , add_months(sysdate, -1)
         , to_date( to_char(add_months(sysdate, -1), 'yyyy-mm') || '-01', 'yyyy-mm-dd')
         , last_day( add_months(sysdate, -2) ) +1
    from dual;
    
    ------ ==== *** 아래처럼 나오도록 하세요 *** ==== ------
    ------------------------------------------------------------------
     전체사원수  10대     20대     30대     40대     50대     60대
    ------------------------------------------------------------------
        107      16	      18	   21	    20	     16	      16        
    ------------------------------------------------------------------
    select count(AGELINE) AS 전체사원수
         , sum( decode(AGELINE, 10, 1) ) AS "10대"
         -- 별칭에 숫자가 먼저 올 경우 쌍따옴표를 붙이거나 문자를 먼저 붙여야함!
         , sum( decode(AGELINE, 20, 1) ) AS "20대"
         , sum( decode(AGELINE, 30, 1) ) AS "30대"
         , sum( decode(AGELINE, 40, 1) ) AS "40대"
         , sum( decode(AGELINE, 50, 1) ) AS "50대"
         , sum( decode(AGELINE, 60, 1) ) AS "60대"
    from
    (
    select trunc( (extract(year from sysdate) - ( substr(jubun,1 ,2) + case when substr(jubun,7,1) in ('1', '2') then 1900 else 2000 end ) + 1 ), -1 ) 
    AS AGELINE
    from employees
    ) V;
    
    
    
    
     ---------- ===== *** [퀴즈] 아래처럼 나오도록 하세요 *** ===== ----------
   -- 방법은 아는데 구현을 못함!! 복습할 것.*******************************************************
   select employee_id, first_name, job_id
   from employees;
   
   --------------------------------------------------------------------------------------------------------------------------------------
     직종ID          남자기본급여평균    여자기본급여평균     기본급여평균    (남자기본급여평균 - 기본급여평균)       (여자기본급여평균 - 기본급여평균) salary
   --------------------------------------------------------------------------------------------------------------------------------------
     ........           ....              ....             ....                   ...                                 ...     
     FI_ACCOUNT         7900              7950             7920                   -20                                  30 
     IT_PROG            5700              6000             5760                   -60                                 240 
     ........           ....              ....             ....                   ...                                 ...   
   --------------------------------------------------------------------------------------------------------------------------------------
   select job_id AS 직종ID
        , trunc( avg(V.MAN_SALARY) ) AS 남자기본급여평균
        , trunc( avg(V.WOMAN_SALARY) ) AS 여자기본급여평균
        , avg(salary) AS 기본급여평균
        , trunc( avg(V.MAN_SALARY) ) - avg(salary) AS "남자평균차액"
        , trunc( avg(V.WOMAN_SALARY) ) - avg(salary) AS "여자평균차액"   
   from
   (
   select job_id
        , salary
        -- , case when substr(jubun, 7, 1) in ('1', '3') then '남' else '여' end AS GENDER
        , case when substr(jubun, 7, 1) in ('1', '3') then salary end AS MAN_SALARY
        -- 성별이 남인 항목들에 대해서만 salary 값을 남기고 그 외에는 null을 입력.
        , case when substr(jubun, 7, 1) in ('2', '4') then salary end AS WOMAN_SALARY
   from employees
   ) V
   group by job_id;
   -- 성별이 남, 여인 사람들의 기본급만 표시 후 활용
   
   
   --------------------------------------------------------------------------------------------
   
   ----- ===== **** Sub Query(서브쿼리) **** ===== -----
   /*
       -- Sub Query (서브쿼리)란?
       select 문속에 또 다른 select 문이 포함되어져 있을 때 포함되어진 select 문을 Sub Query (서브쿼리)라고 부른다.
       
       
       select ...
       from .....  ==> Main Query(메인쿼리 == 외부쿼리)
       where ... in (select ... 
                     from .....) ==> Sub Query (서브쿼리 == 내부쿼리)
   */
   
   
   /*
       employees 테이블에서
       기본급여가 제일 많은 사원과 기본급여가 제일 적은 사원의 정보를
       사원번호, 사원명, 기본급여로 나타내세요...
   */
   
   
   from employees
   where salary = (employees 테이블에서 salary 의 최대값) or 
                  (employees 테이블에서 salary 의 최소값);
                  
   (employees 테이블에서 salary 의 최대값) ==> select max(salary) from employees ==> 24000
   (employees 테이블에서 salary 의 최대값) ==> select min(salary) from employees ==> 2100
   
   select employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , salary AS 기본급여
   from employees
   where salary = (select max(salary) from employees) or 
         salary = (select min(salary) from employees);
         
    /*
        100	Steven King	24000
        132	TJ Olson	2100
    */
    
    /*
      [퀴즈]
      employees 테이블에서 부서번호가 60, 80번 부서에 근무하는 사원들중에
      월급이 50번 부서 직원들의 '평균월급' 보다 많은 사원들만 
      부서번호, 사원번호, 사원명, 월급을 나타내세요....
   */
   
   select department_id AS 부서번호
        , employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , nvl(salary + (salary * commission_pct), salary) AS 월급
   from employees
   where department_id in('60', '80') and nvl(salary + (salary * commission_pct), salary) 
         > ( select avg( nvl(salary + (salary * commission_pct), salary) ) 
             from employees
             where department_id = 50 )
    order by 1, 4 desc;
           
    -- 한 번에 다하려고 하지 말고 하나 하나 완성시켜라. 다 아는 거니까 할 수 있다!!!!!!!!!!!!!
    
    ------------------------------------------------------------------------------------------------------
    
    create table tbl_authorbook
   (bookname       varchar2(100)    -- 도서명
   ,authorname     varchar2(20)     -- 작가명
   ,loyalty        number(5)        -- 로열티
   );
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('자바프로그래밍','이순신',1000);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('로빈슨크루소','한석규',800);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('로빈슨크루소','이순신',500);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('조선왕조실록','엄정화',2500);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('그리스로마신화','유관순',1200);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('그리스로마신화','이혜리',1300);
   
   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('그리스로마신화','서강준',1700);

   insert into tbl_authorbook(bookname, authorname, loyalty)
   values('어린왕자','김유신',1800);
   
   commit;
   
   
   select * 
   from tbl_authorbook;
   
   ---  tbl_authorbook 테이블에서 공저(도서명은 동일하지만 작가명이 다른 도서)로 지어진 도서정보를 나타내세요... ---
   
   /*
       ---------------------------------
         도서명         작가명    로얄티
       ---------------------------------  
         로빈슨크루소    한석규    800
         로빈슨크루소    이순신    500
         그리스로마신화  유관순   1200
         그리스로마신화  이혜리   1300
         그리스로마신화  서강준   1700
       ---------------------------------  
   */
   
   
   
   select bookname, count(*)
   from tbl_authorbook
   group by bookname
   -- 공동저자는 책의 이름이 2번 이상 나오기 때문에 책의이름이 나온 횟수가 1보다 큰 책의이름을 파악한다.
   /*
        bookname  count(*)
        로빈슨크루소	2
        그리스로마신화	3
        자바프로그래밍	1
        조선왕조실록	1
        어린왕자	1
   */
   
   select bookname
   from tbl_authorbook
   group by bookname
   having count(*) > 1;
   
   select *
   from tbl_authorbook
   where bookname in( select bookname
                      from tbl_authorbook
                      group by bookname
                      having count(*) > 1);
   
    
