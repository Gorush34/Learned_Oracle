show user;
-- USER이(가) "HR"입니다.

select * from dba_users;
-- ORA-00942: table or view does not exist
-- dba_userss 은 관리자만 조회할 수 있는 것이지 일반 사용자인 hr 은 조회가 불가하다.


-- /////////////////////////////////////////////////////////////

/*
    ORACLEL 은 관계형 데이터베이스(Relation DataBase) 관리 시스템(Management System) 이다.
    Table = Relation
    RDMBS(Relation DataBase Management System) 란? 
    ==> 데이터를 열(Column, Field) 과 행(Row, Record, Tuple) 으로 이루어진 테이블(Table, Entity(개체), Relation) 형태로
        저장해서 관리하는 시스템을 말한다.
    
*/

-- ** 현재 오라클 서버에 접속되어진 사용자(지금은 hr)가 만든(소유의) 테이블(Table) 목록을 조회하겠다.
select *
from tab;

/*
----------------------------
TNAME               TABTYPE
----------------------------
COUNTRIES	        TABLE
DEPARTMENTS	        TABLE
EMPLOYEES	        TABLE
EMP_DETAILS_VIEW	VIEW    (VIEW 는 테이블은 아니지만 select 되어진 결과물을 마치 테이블 처럼 보는 것)
JOBS	            TABLE
JOB_HISTORY	        TABLE
LOCATIONS	        TABLE
REGIONS         	TABLE
*/


-- sql 명령어는 대, 소문자를 구분하지 않습니다.
-- 테이블명과 컬럼명도 대, 소문자를 구분하지 않습니다.
SELECT *
FROM DEPARTMENTS;

select *
from departments;

SeleCT *
FROM depaRTments;


select *
from employees;
-- * 은 Column 명임.

select DEPARTMENT_ID, DEPARTMENT_NAME
from departments;

select department_id, department_name
from departments;

select dEPArtment_id, department_NAME
froM departMents;

-- !!! 저장되어진 데이터 값 만큼은 반드시 대, 소문자를 구분합니다.

SELECT *                        -- 골라라
FROM departments                -- 에서
WHERE department_name = 'IT';   -- 에 있는 것을
-- 조회되어서 나옴.


SELECT *                        -- 골라라
FROM departments                -- 에서
WHERE department_name = 'it';   -- 에 있는 것을
-- 아무것도 안나온다.

SELECT *                        -- 골라라
FROM departments                -- 에서
WHERE department_name = 'It';   -- 에 있는 것을
-- 아무것도 안나온다.

SELECT *                        
FROM departments               
WHERE department_name = 'Sales';

-------------------------------------------------

-- 어떤 테이블의 컬럼의 구성을 알고자 할 때 아래와 가이 하면 된다.
describe departments;                   -- departments 테이블의 컬럼(Column)의 정보를 알려주는 것이다.
-- 또는 
desc departments;                       -- "부서" 테이블

/*
이름              널?       유형           
--------------- -------- ------------ 
DEPARTMENT_ID   NOT NULL NUMBER(4)      -- 이 컬럼에는 null 값이 들어오면 안되고, 데이터 유형이 NUMBER 여야 함.
DEPARTMENT_NAME NOT NULL VARCHAR2(30) 
MANAGER_ID               NUMBER(6)    
LOCATION_ID              NUMBER(4)   
*/

-- NUMBER : 숫자 / VARCHAR2 : 문자열

select *
from employees;                         -- "사원" 테이블

desc employees;

/*
이름             널?       유형            범위                            이름의 뜻                       
-------------- -------- ----------------------------------------------------------------
EMPLOYEE_ID    NOT NULL NUMBER(6)        -999999~999999 이내의 값만       (사원번호)
FIRST_NAME              VARCHAR2(20)     문자열 최대 20 byte              (이름)
LAST_NAME      NOT NULL VARCHAR2(25)     문자열 최대 25 byte              (성)
EMAIL          NOT NULL VARCHAR2(25)     문자열 최대 25 byte              (이메일)
PHONE_NUMBER            VARCHAR2(20)     문자열 최대 20 byte              (연락처)
HIRE_DATE      NOT NULL DATE             날짜만 들어온다.                  (입사일자)
JOB_ID         NOT NULL VARCHAR2(10)                                    (직종)
SALARY                  NUMBER(8,2)     -999999.99~999999.99            (기본급여)
COMMISSION_PCT          NUMBER(2,2)     -0.99~0.99                      (커미션(수당)퍼센티지)
MANAGER_ID              NUMBER(6)                                       (직속상관(사수)의 사원번호)
DEPARTMENT_ID           NUMBER(4)                                       (해당사원이 근무하는 부서번호)
*/

select *
from LOCATIONS;     -- 부서의 위치정보를 알려주는 테이블

select *
from COUNTRIES;     -- 국가 정보를 알려주는 테이블

select *
from REGIONS;       -- 대륙 정보를 알려주는 테이블

-----------------------------------------------------------------------------------------------------

/*
    === 아주아주아주아주아주아주아주아주아주아주아주아주아주아주 중요중요중요중요중요중요중요중요중요중요!!!!! ===
    === 필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기필수암기 ===
    
    === 어떠한 테이블(또는 뷰)에서 데이터 정보를 꺼내와 보는 명령어인 select 의 처리 순서 ===
    
    select 컬럼명, 컬럼명, ...     -- 5   컬럼명 대신에 *(아스테리크)을 쓰면 모든 컬럼을 뜻하는 것이다.
    from 테이블명(또는 뷰명)        -- 1
    where 조건절                  -- 2   where 조건절이 뜻하는 것은 해당 테이블명(또는 뷰명)에서 조건에 만족하는 행(row)을 메모리(RAM)에 로딩(올리는것)을 해주는 것이다.
    group by 절                  -- 3
    having 그룹함수조건절          -- 4
    order by 절                  -- 6
    
     테이블명(뷰명)으로부터 조건절에 위치하는 절로 그룹되어지면서 그룹함수조건절을 가진 컬럼을 선택하여 절로 정렬한다
     from                where           group by        having              select      order by
     


-------------------------------------------------------------------------------------------

-- *** NULL 을 처리해주는 함수 *** --
-- NULL 은 존재하지 않는 것이므로 사칙연산( + - * / )에 NULL 이 포함되어지면 그 결과는 무조건 NULL이 된다.

/*
*/

-- 1. NVL

    select '안녕하세요'
    from dual;          -- dual 은 select 다음에 나오는 값들을 화면에 보여주기 위한 용도로 쓰이는 가상테이블이다.
    
    select 1+2, 2-1, 3*2, 5/2,
           1+null, 2-null, 0*null, 5/null 
    from dual;
    
    select  nvl(7,3), nvl(null,3),
            nvl('이순신', '거북선'), nvl(null, '거북선')
    from dual;
    -- nvl(1,2) 1번째가 null이 아니면 2번째 값을 줌.
    
    -- employees 멤버는 107명(암기)
    -- employees(직원) 테이블에 부서번호(department_id)가 60번에 근무하는 사원들만 
    -- 사원번호, 사원명, 기본급여, 커미션 퍼센티지, 부서번호를 나타내세요.
    
    select EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT, DEPARTMENT_ID  
    from employees
    where department_id = 60;   -- where 절이 있으므로 department_id 컬럼의 값이 60이 행들만 올라간다.
    
    -- employees(직원) 테이블에 모든 사원들에 대해 
    -- 사원번호, 사원명, 기본급여, 커미션 퍼센티지, 부서번호를 나타내세요.
    
    select EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT, DEPARTMENT_ID  
    from employees;  -- where 절이 없으므로 employees 테이블에 있는 모든 행들이 메모리(RAM)에 올라간다.
    
    -- commission_pct 컬럼이 뜻하는 바는 다음과 같다.
    -- commission_pct 컬럼의 값이 null 이라면 수당이 존재하지 않는다.
    -- commission_pct 컬럼의 값이 0.3 이라면 salary(기본급여)에 30%가 수당이 된다.
    -- salary  commission_pct   = salary * ommission_pct
    -- 1000         0.3         = 300
    -- 2000         0.3         = 600
    -- 4000         0.3         = 1200
    -- 5000         null        = null


    -- employees(직원) 테이블에 모든 사원들에 대해 
    -- 사원번호, 사원명, 기본급여, 커미션 퍼센티지, 월급, 부서번호를 나타내세요. 
    -- 월급은 기본급여 + 수당액을 합친것을 말한다.
        select EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT,
               SALARY + (SALARY * COMMISSION_PCT), DEPARTMENT_ID  
    from employees; -- 잘못 구한 것 
    
    
    select EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT,
           nvl(SALARY + (SALARY * COMMISSION_PCT), SALARY), 
           DEPARTMENT_ID  
    from employees; -- 올바르게 구한 것

-- 2. NVL2
-- 1번째값이 null이 아니면 2번째값, 맞다면 3번쨰값을 출력

    select  nvl2(7,3,2), nvl2(null,3,2),
            nvl2('이순신', '거북선','구국영웅'), nvl2(null, '거북선','구국영웅')
    from dual;
    
    select EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT,
           nvl(SALARY + (SALARY * COMMISSION_PCT), SALARY), 
           nvl2( COMMISSION_PCT, SALARY + (SALARY * COMMISSION_PCT), SALARY),
           DEPARTMENT_ID  
    from employees; -- 올바르게 구한 것
    
    
    
    -- *** 컬럼에 대해 별칭(Alias) 부여하기 *** -- 
    select EMPLOYEE_ID as "사원번호"
           , LAST_NAME "이름" -- 별칭(Alias) 에서 as 는 생략 가능함.
           , FIRST_NAME 성 -- 별칭(Alias) 에서 "" 는 생략 가능함.
           , SALARY "기본 급여" -- 별칭(Alias) 에서 공백을 주고 싶으면 반드시 ""를 사용해야 함.
           , COMMISSION_PCT 커미션퍼센티지
           , nvl(SALARY + (SALARY * COMMISSION_PCT), SALARY) 월급1
           , nvl2( COMMISSION_PCT, SALARY + (SALARY * COMMISSION_PCT), SALARY) 월급2
           , DEPARTMENT_ID 부서번호
    from employees;
