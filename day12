-----------------------------------------------------------------------------------------
                  ------- **** 사용자 정의 함수 **** -------
   -----------------------------------------------------------------------------------------           
   
   ----  주민번호를 입력받아서 성별을 알려주는 함수 func_gender(주민번호)을 생성해보겠습니다. ----
   /*
      [문법]
      create or replace function 함수명 
      (파라미터변수명  IN  파라미터변수의타입)
      return 리턴되어질타입
      is
         변수선언;
      begin
         실행문;
         return 리턴되어질값;
      end 함수명;
   */
   
   create or replace function func_gender
   (p_jubun IN varchar2) -- varchar2(13)(파라미터) 와 같이 자리수를 쓰면 오류!
   return varchar2    -- varchar2(6)(리턴) 와 같이 자리수를 쓰면 오류!
   is
        V_result        varchar2(6); -- 여기는 변수에 대한 정의를 해야 해서 자리수를 써야 함.
   
   begin
        select case when substr(p_jubun, 7, 1) in ('1', '3') then '남' else '여' end
               INTO
               V_result
        from dual;
   
        return V_result;
   end func_gender;
   -- Function FUNC_GENDER이(가) 컴파일되었습니다.

   
   select func_gender('9201161232323'),
          func_gender('9201162311323'),
          func_gender('9201163311323'),
          func_gender('9201164311323')
   from dual;
   
   create or replace function func_age 
      (p_jubun  IN  varchar2)
      return number
      is
         V_result       number(3);
         
      begin
         select extract(year from sysdate) - ( to_number(substr( p_jubun, 1, 2)) + case when substr(p_jubun,7,1) in('1','2') then 1900 else 2000 end ) + 1
               INTO
               v_result
        from dual;
         
         return V_result;
         
         
      end func_age;
      -- Function FUNC_AGE이(가) 컴파일되었습니다.
      
      
      create or replace function func_gender_2
   (p_jubun IN varchar2) 
   return varchar2    
   is
        V_result        varchar2(6); 
   
   begin
        V_result := case when substr(p_jubun, 7, 1) in ('1', '3') then '남' else '여' end;
        return V_result;
   end func_gender_2;
   -- Function FUNC_GENDER_2이(가) 컴파일되었습니다.
   
   
   create or replace function func_age_2 
      (p_jubun  IN  varchar2)
      return number
      is
         V_result       number(3);
         
      begin
         v_result := extract(year from sysdate) - ( to_number(substr( p_jubun, 1, 2)) + case when substr(p_jubun,7,1) in('1','2') then 1900 else 2000 end ) + 1;
         
         return V_result;
         
         
      end func_age_2;
      -- Function FUNC_AGE_2이(가) 컴파일되었습니다.

   select employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , jubun AS 주민번호
        , func_gender(jubun) AS 성별
        , func_gender_2(jubun) AS 성별2
        , func_age(jubun) AS 나이
        , func_age_2(jubun) AS 나이
   from employees;
   
   -- employee 테이블에서 25세 이상 35세 이하인 여자만
   -- 사원번호, 사원명, 주민번호, 나이, 성별을 나타내세요
   
   select employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , jubun AS 주민번호
        , func_gender(jubun) AS 성별
        , func_age(jubun) AS 나이
   from employees
   where func_age(jubun) between 25 and 35 AND
         func_gender(jubun) = '여';
         
   -- employee 테이블에서 연령대별, 성별 인원수와 퍼센티지를 나타내세요..
   select nvl( to_char( trunc( func_age(jubun), -1 ) ), ' ' ) AS 연령대
        , nvl( func_gender(jubun), ' ' ) AS 성별
        , count(*) AS 인원수
        , round(count(*) / (select count(*) from employees) * 100, 1) AS 퍼센티지
   from employees
   group by rollup( trunc( func_age(jubun), -1 ), func_gender(jubun) );
   
   
   ---- *** === 생성되어진 함수의 소스를 조회해봅니다. === *** ----
   select text
   from user_source
   where type = 'FUNCTION' and name = 'FUNC_AGE';
   
   
   ---- [퀴즈] 아래와 같은 결과물이 나오도록 프로시저( pcd_employees_info )를 생성하세요...
   ----       성별과 나이는 위에서 만든 함수를 사용하세요..
   
   execute pcd_employees_info(101);  -- 여기서 숫자 101은 사원번호이다. 
   exec    pcd_employees_info(101);  -- 여기서 숫자 101은 사원번호이다.
   
   /*
      ----------------------------------------------------
       사원번호    부서명    사원명    입사일자   성별   나이
      ----------------------------------------------------
        101       .....    ......   .......   ....  ....
   */
   
   
      
      
      -----------선생님 답 --------------------------------
   create or replace procedure pcd_employees_info
   (p_employee_id  IN  employees.employee_id%type)
   is
       v_employee_id       employees.employee_id%type;
       v_department_name   departments.department_name%type;
       v_ename             varchar2(40);
       v_hiredate          varchar2(10);
       v_gender            varchar2(6);
       v_age               number(3);
   begin
   
       WITH E AS
       (
         select employee_id
              , first_name || ' ' || last_name AS ENAME
              , to_char(hire_date, 'yyyy-mm-dd') AS HIREDATE
              , func_gender(jubun) AS GENDER
              , func_age(jubun) AS AGE
              , department_id
         from employees
         where employee_id = p_employee_id
       )
       select E.employee_id, D.department_name, E.ename, E.hiredate, E.gender, E.age
              INTO
              v_employee_id, v_department_name, v_ename, v_hiredate, v_gender, v_age
       from departments D RIGHT JOIN E
       ON D.department_id = E.department_id;
       
       dbms_output.put_line( lpad('-',50,'-') );
       dbms_output.put_line('사원번호    부서명    사원명    입사일자   성별   나이');
       dbms_output.put_line( lpad('-',50,'-') );
       
       dbms_output.put_line( v_employee_id || ' ' ||
                             v_department_name || ' ' ||
                             v_ename || ' ' ||
                             v_hiredate || ' ' ||
                             v_gender || ' ' ||
                             v_age );
       
   end pcd_employees_info;
   -- Procedure PCD_EMPLOYEES_INFO이(가) 컴파일되었습니다.
   
   exec    pcd_employees_info(101);
    /*
        --------------------------------------------------
        사원번호    부서명    사원명    입사일자   성별   나이
        --------------------------------------------------
        101 Executive Neena Kochhar 2005-09-21 남 38
    */
   
   -------------------------------------------------------------------------------
      
   exec    pcd_employees_info(337); -- 존재하지 않는 사원번호
   /*
        오류 보고 -
        ORA-01403: no data found ==> 프로시저에서 데이터(행)가 없으면 no data found 라는 오류가 발생한다.
   */
   
   -- [데이터(행)가 없을 경우 해결책] --
   --> 예외절(Exception)처리를 해주면 된다.
   
   create or replace procedure pcd_employees_info
   (p_employee_id  IN  employees.employee_id%type)
   is
       v_employee_id       employees.employee_id%type;
       v_department_name   departments.department_name%type;
       v_ename             varchar2(40);
       v_hiredate          varchar2(10);
       v_gender            varchar2(6);
       v_age               number(3);
   begin
   
       WITH E AS
       (
         select employee_id
              , first_name || ' ' || last_name AS ENAME
              , to_char(hire_date, 'yyyy-mm-dd') AS HIREDATE
              , func_gender(jubun) AS GENDER
              , func_age(jubun) AS AGE
              , department_id
         from employees
         where employee_id = p_employee_id
       )
       select E.employee_id, D.department_name, E.ename, E.hiredate, E.gender, E.age
              INTO
              v_employee_id, v_department_name, v_ename, v_hiredate, v_gender, v_age
       from departments D RIGHT JOIN E
       ON D.department_id = E.department_id;
       
       dbms_output.put_line( lpad('-',50,'-') );
       dbms_output.put_line('사원번호    부서명    사원명    입사일자   성별   나이');
       dbms_output.put_line( lpad('-',50,'-') );
       
       dbms_output.put_line( v_employee_id || ' ' ||
                             v_department_name || ' ' ||
                             v_ename || ' ' ||
                             v_hiredate || ' ' ||
                             v_gender || ' ' ||
                             v_age );
                             
        EXCEPTION
          WHEN no_data_found THEN -- no_data_found 은 오라클에서 데이터가 존재하지 않을 경우 발생하는 오류임.
             dbms_output.put_line('>> 사원번호 ' || p_employee_id || '은 존재하지 않습니다. <<');
   end pcd_employees_info;
   -- Procedure PCD_EMPLOYEES_INFO이(가) 컴파일되었습니다.
   
   exec    pcd_employees_info(337);
   -- >> 사원번호 337은 존재하지 않습니다. <<
   
   
   
   ------------- ========== ****** 제어문(IF문) ****** ========= -----------------
   /*
        ※ 형식
        
        if          조건1     then    실행문장1;
        elsif       조건2     then    실행문장2;
        elsif       조건3     then    실행문장3;
        else                         실행문장4;
        end if;
   
   */
   
   update employees set employee_id = 101
   where employee_id = 102;
   /*
        오류 보고 -
        ORA-00001: unique constraint (HR.EMP_EMP_ID_PK) violated
   */
   
   create or replace function func_age_3 
      (p_jubun  IN  varchar2)
      return number
      is
         V_genderNum    varchar2(1) := substr(p_jubun, 7, 1);
            -- 여기에는 '1' 또는 '2' 또는 '3' 또는 '4'가 들어올 것이다.
         V_year         number(4);
         error_jubun    EXCEPTION; -- error_jubun 은 사용자가 정의하는 예외절(Exception)이다.     
         V_age          number(3);
 
      begin
         if length(p_jubun) != 13 then RAISE error_jubun; 
         end if;
      
      
         if         v_genderNum IN('1', '2') then v_year := 1900;
         elsif      v_genderNum IN('3', '4') then v_year := 2000;
         else       RAISE error_jubun; -- error_jubun 은 사용자가 정의하는 예외절(Exception)이다.    
         end if;
         
         V_age := (extract(year from sysdate) - ( v_year + to_number(substr(p_jubun, 1, 2) ) ) + 1 );
         return V_age;
         
         EXCEPTION
            when error_jubun THEN 
                 RAISE_APPLICATION_ERROR(-20001, '>> 올바르지 않은 주민번호입니다. <<');
                 -- -20001 은 오류번호로써, 사용자가 정의해주는 EXCEPTION 에 대해서는 오류번호를 -20001부터 -20999까지만 사용하도록 오라클에서 비워두었다.
                 -- 사용자가 스스로 오류번호를 정의하여 사용자에 맞게 오류 발생 원인 파악 가능.

      end func_age_3;
   -- Function FUNC_AGE_3이(가) 컴파일되었습니다.

      
      select employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , jubun AS 주민번호
        , func_gender(jubun) AS 성별
        , func_age_3(jubun) AS 나이
   from employees;
   
   select '90011922234567', func_age_3('90011922342567')
   from dual;
   -- ORA-20001: >> 올바르지 않은 주민번호입니다. <<
   
   select '9001192234567', func_age_3('9001192342567')
   from dual;
   
   select '9001192s34567', func_age_3('9001192s34567')
   from dual;
   -- 9001192s34567	33 ==> 잘못된 주민번호를 입력했지만 지금은 나이가 나온다.
   --                      잘못된 주민번호이므로 오류가 뜨게끔 반복문을 배운 다음 고치자.
   
   -------------------- ===== **** 반복문 **** ===== ---------------
   ---------- ===== **** 반복문 **** ===== ----------
  /*
     반복문에는 종류가 3가지가 있다.
  
     1. 기본 LOOP 문
     2. FOR LOOP 문
     3. WHILE LOOP 문
  */
  
  ----- ====== ****  1. 기본 LOOP 문 **** ====== -----
  /*
      [문법]
      LOOP
          실행문장;
      EXIT WHEN 탈출조건;   -- 탈출조건이 참 이라면 LOOP 를 탈출한다.
      END LOOP;
  */
  
  create table tbl_looptest_1
  (bunho            number
  ,name             varchar2(50)
  );
  -- Table TBL_LOOPTEST_1이(가) 생성되었습니다.
  
  --- *** tbl_looptest_1 테이블에 행 20000 개를 insert 해보자. *** ---
  create or replace procedure pcd_tbl_looptest_1_insert
  (p_name  IN tbl_looptest_1.name%type
  ,p_count IN number) -- p_count 에 20000 을 넣을 것이다.
  is
      v_bunho  tbl_looptest_1.bunho%type := 0; -- 변수의 초기화!!(변수에 값을 처음부터 넣어주기)
  begin
      LOOP 
          v_bunho := v_bunho+1; -- v_bunho 은 반복할 때마다 1씩 증가한다
          
      EXIT WHEN v_bunho > p_count;   -- 20001 > 20000 탈출조건이 참 이라면 LOOP 를 탈출한다.
      
          insert into tbl_looptest_1(bunho, name) values(V_bunho, p_name||v_bunho);
      
      END LOOP;
  
  end pcd_tbl_looptest_1_insert;
  -- Procedure PCD_TBL_LOOPTEST_1_INSERT이(가) 컴파일되었습니다.
  
  exec pcd_tbl_looptest_1_insert('이순신', 20000);
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1; -- 20000
  
  rollback;
  -- 롤백 완료.
  
  exec pcd_tbl_looptest_1_insert('엄정화', 50000);
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1; -- 50000
  
  commit;
  
  exec pcd_tbl_looptest_1_insert('설현', 30000);
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1; -- 80000
  
  commit;
  
  truncate table tbl_looptest_1;
  -- Table TBL_LOOPTEST_1이(가) 잘렸습니다.
  
  
  --- **** 이름이 없는 익명 프로시저(Anonymous Procedure, 1회용임)로 tbl_looptest_1 테이블에 행을 20000 개를 insert 해보겠습니다. **** ---
  declare
         v_bunho number := 0; -- 변수의 선언 및 초기화는 declare 안에
  
  begin
       LOOP 
          v_bunho := v_bunho+1; -- v_bunho 은 반복할 때마다 1씩 증가한다
          
          EXIT WHEN v_bunho > 20000;   -- 20001 > 20000 탈출조건이 참 이라면 LOOP 를 탈출한다.
      
          insert into tbl_looptest_1(bunho, name) values(V_bunho, '이혜리'||v_bunho);
      
      END LOOP;
  end;
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1; -- 20000
  
  rollback;
  -- 롤백 완료.
  
  ----- ====== ****  2. FOR LOOP 문 **** ====== -----
  /*
      [문법]
      
      for 변수  in  [reverse]  시작값..마지막값  loop
          실행문장;
      end loop;
  */
  
  select count(*)
  from tbl_looptest_1;
  
  
  --- **** 이름이 없는 익명 프로시저(Anonymous Procedure, 1회용임)로 tbl_looptest_1 테이블에 행을 20000 개를 insert 해보겠습니다. **** ---
  begin
       for i in 1..20000 loop -- 변수 i에 초기값은 1이고 매번 i의 값은 1씩 증가하고 20000까지 반복한다. 
          insert into tbl_looptest_1(bunho, name) values(i, '이혜리'||i); -- 즉, 20000번씩 증가.
       end loop;
  end;
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  -- 변수 없으면 declare 생략 가능.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1;
  
  rollback;
  -- 롤백 완료.
  
  -- declare 사용하는 경우
  declare
       v_name   varchar2(20) := '강감찬';
  
  begin
       for i in 1..20000 loop -- 변수 i의 초기값은 1이고 매번 i의 값은 1씩 증가하고 20000까지 반복한다. 
          insert into tbl_looptest_1(bunho, name) values(i, v_name||i); -- 즉, 20000번씩 증가.
       end loop;
  end;
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1;
  
  rollback;
  -- 롤백 완료.
  
  
  declare
       v_name   varchar2(20) := '아이유';
  
  begin
       for i in reverse 1..100 loop -- 변수 i의 초기값은 100이고 매번 i의 값은 1씩 감소하고 1까지 반복한다. 
          insert into tbl_looptest_1(bunho, name) values(i, v_name||i); -- 즉, 20000번씩 증가.
       end loop;
  end;
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1;
  
  rollback;
  -- 롤백 완료.
  
  ----- ====== ****  3. WHILE LOOP 문 **** ====== -----
  /*
     [문법]
     WHILE  조건  LOOP
         실행문장;   -- 조건이 참이라면 실행함. 조건이 거짓이 되어지면 반복문을 빠져나간다.
     END LOOP;
  */
  
  declare
       v_cnt        number := 1; -- 변수의 선언 및 초기화
  begin
       while not(v_cnt>20000) loop    -- not(탈출조건) 탈출조건이 참이라면 전체가 거짓이 되어지므로 반복문을 빠져나간다.
        insert into tbl_looptest_1(bunho, name) values(v_cnt, '홍길동'||v_cnt);
        v_cnt := v_cnt +1;
       end loop;
  end;
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  select *
  from tbl_looptest_1
  order by 1;
  
  select count(*)
  from tbl_looptest_1;
  
  rollback;
  -- 롤백 완료.
  
  
  select '9001192s34567', func_age_3('9001192s34567')
  from dual;
  
  create or replace function func_age_3 
      (p_jubun  IN  varchar2)
      return number
      is
         V_cnt          number(2) := 1;
         V_chr          varchar2(3);
      
         V_genderNum    varchar2(1) := substr(p_jubun, 7, 1);
            -- 여기에는 '1' 또는 '2' 또는 '3' 또는 '4'가 들어올 것이다.
         V_year         number(4);
         error_jubun    EXCEPTION; -- error_jubun 은 사용자가 정의하는 예외절(Exception)이다.     
         V_age          number(3);
         
      begin
         if length(p_jubun) != 13 then RAISE error_jubun; 
         else
            /*
             loop 
                 V_chr := substr(p_jubun, V_cnt, 1);
                 if not(v_chr between '0' and '9') 
                    then RAISE error_jubun;
                 end if;
                 V_cnt := V_cnt +1;
                 EXIT WHEN V_cnt > 13;
             end loop;
           */
           
           -- 또는 (for  사용)
           
         /*
           for V_cnt in 1..13 loop -- 변수 V_cnt 초기값은 1이고 매번 V_cnt 값은 1씩 증가하고 13까지 반복한다. 
           V_chr := substr(p_jubun, V_cnt, 1);
           if not(v_chr between '0' and '9') 
                    then RAISE error_jubun;
           end if;
         end loop;
         */
         
         -- 또는 (while 사용)
         while not(v_cnt>13) loop    -- not(탈출조건) 탈출조건이 참이라면 전체가 거짓이 되어지므로 반복문을 빠져나간다.
            V_chr := substr(p_jubun, V_cnt, 1);
            if not(v_chr between '0' and '9') 
                    then RAISE error_jubun;
            end if;
            v_cnt := v_cnt +1;
         end loop;
           
         end if;


         if         v_genderNum IN('1', '2') then v_year := 1900;
         elsif      v_genderNum IN('3', '4') then v_year := 2000;
         else       RAISE error_jubun; -- error_jubun 은 사용자가 정의하는 예외절(Exception)이다.    
         end if;

         V_age := (extract(year from sysdate) - ( v_year + to_number(substr(p_jubun, 1, 2) ) ) + 1 );
         return V_age;

         EXCEPTION
            when error_jubun THEN 
                 RAISE_APPLICATION_ERROR(-20001, '>> 올바르지 않은 주민번호입니다. <<');
                 -- -20001 은 오류번호로써, 사용자가 정의해주는 EXCEPTION 에 대해서는 오류번호를 -20001부터 -20999까지만 사용하도록 오라클에서 비워두었다.
                 -- 사용자가 스스로 오류번호를 정의하여 사용자에 맞게 오류 발생 원인 파악 가능.

      end func_age_3;
  -- Function FUNC_AGE_3이(가) 컴파일되었습니다.
  
  select '9001192s34567', func_age_3('9001192s34567')
  from dual;
  -- ORA-20001: >> 올바르지 않은 주민번호입니다. <<
  -- 위에서 안됐던 것 수리 완료.
  
  
  
  
  
  
  create table tbl_member_test1
  (userid      varchar2(20)
  ,passwd      varchar2(20) not null
  ,name        varchar2(30) not null
  ,constraint  PK_tbl_member_test1_userid  primary key(userid)
  );
  -- Table TBL_MEMBER_TEST1이(가) 생성되었습니다.
  
  -- [퀴즈] tbl_member_test1 테이블에 insert 해주는 pcd_tbl_member_test1_insert 라는 프로시저를 작성하세요.
  
  exec pcd_tbl_member_test1_insert('hongkd','qwer1234$','홍길동');  --> 정상적으로 insert 되어진다.
  
  exec pcd_tbl_member_test1_insert('eomjh','a3$','유관순');      --> 오류메시지 -20002 '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.' 이 뜬다. 그러므로 insert 가 안되어진다. 
  exec pcd_tbl_member_test1_insert('eomjh','abc1234','유관순');  --> 오류메시지 -20002 '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.' 이 뜬다. 그러므로 insert 가 안되어진다.
  
  create or replace procedure pcd_tbl_member_test1_insert
  (p_userid IN tbl_member_test1.userid%type
  ,p_passwd IN tbl_member_test1.passwd%type
  ,p_name IN tbl_member_test1.name%type
  )
  
  is
       v_length             number(20);
       error_insert         exception;
       v_ch                 varchar2(3);
       v_flag_alphabet      number(1) := 0;
       v_flag_number       number(1) := 0;
       v_flag_special      number(1) := 0;
       
  begin
       v_length := length(p_passwd);
       
       if( v_length < 5 OR v_length > 20 ) then
          RAISE error_insert; -- 사용자가 정의하는 예외절(EXCEPTION)을 구동시켜라.
       else
           for i in 1..v_length loop
               v_ch := substr(p_passwd, i, 1);
               
               if (v_ch between 'a' and 'z' OR v_ch between 'A' and 'Z') then -- 영문자라면?
                   v_flag_alphabet := 1;
               elsif (v_ch between '0' and '9') then -- 숫자라면
                   v_flag_number := 1;
               else -- 특수문자라면
                   v_flag_special := 1;
               
               end if;
           end loop;
           
           if(v_flag_alphabet * v_flag_number * v_flag_special = 1) then
               insert into tbl_member_test1(userid, passwd, name) values(p_userid, p_passwd, p_name);
           else
               RAISE error_insert; -- 사용자가 정의하는 예외절(EXCEPTION)을 구동시켜라.
           end if;
       
       end if;
       
       
       exception
            when error_insert then
                 raise_application_error(-20002, '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.');
  
  
  end pcd_tbl_member_test1_insert;
  -- Procedure PCD_TBL_MEMBER_TEST1_INSERT이(가) 컴파일되었습니다.
  
  exec pcd_tbl_member_test1_insert('hongkd','qwer1234$','홍길동');  --> 정상적으로 insert 되어진다.
  
  exec pcd_tbl_member_test1_insert('eomjh','a3$','유관순');      --> 오류메시지 -20002 '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.' 이 뜬다. 그러므로 insert 가 안되어진다. 
  exec pcd_tbl_member_test1_insert('eomjh','abc1234','유관순');  --> 오류메시지 -20002 '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.' 이 뜬다. 그러므로 insert 가 안되어진다.
  
  select *
  from tbl_member_test1;
  -- hongkd	qwer1234$	홍길동
  
  commit;
  -- 커밋 완료.
  
  
  
  
  
  ------------ ***** 사용자 정의 예외절(EXCEPTION) ***** ----------------
     예외절 = 오류절
     
     ※ 형식
     
     exception
          when  익셉션이름1  [or 익셉션이름2]  then
                실행문장1;
                실행문장2;
                실행문장3;
                
          when  익셉션이름3  [or 익셉션이름4]  then
                실행문장4;
                실행문장5;
                실행문장6; 
                
          when  others  then  
                실행문장7;
                실행문장8;
                실행문장9; 
   ------------------------------------------------------------------   
   
   /*
      === tbl_member_test1 테이블에 insert 할 수 있는 요일명과 시간을 제한해 두겠습니다. ===
        
          tbl_member_test1 테이블에 insert 할 수 있는 요일명은 월,화,수,목,금 만 가능하며
          또한 월,화,수,목,금 중에 오후 2시 부터 오후 5시 이전까지만(오후 5시 정각은 안돼요) insert 가 가능하도록 하고자 한다.
          만약에 insert 가 불가한 요일명(토,일)이거나 불가한 시간대에 insert 를 시도하면 
          '영업시간(월~금 14:00 ~ 16:59:59 까지) 아니므로 입력불가함!!' 이라는 오류메시지가 뜨도록 한다. 
   */
   
   
   create or replace procedure pcd_tbl_member_test1_insert
  (p_userid IN tbl_member_test1.userid%type
  ,p_passwd IN tbl_member_test1.passwd%type
  ,p_name IN tbl_member_test1.name%type
  )
  
  is
       v_length             number(20);
       error_insert         exception;
       error_dayTime        exception;
       v_ch                 varchar2(3);
       v_flag_alphabet      number(1) := 0;
       v_flag_number       number(1) := 0;
       v_flag_special      number(1) := 0;
       
  begin
       
       -- 먼저, 입력(insert)이 불가한 요일명과 시간대인지 알아보자.
       if ( to_char(sysdate, 'd') in ('1','7') OR -- to_char(sysdate, 'd') ==> '1'(일), '2'(월), '3'(화), '4'(수), '5'(목), '6'(금), '7'(토)
            to_char(sysdate, 'hh24') < '14' OR to_char(sysdate, 'hh24') > '16'
          ) then RAISE error_dayTime; -- 사용자가 정의하는 예외절(EXCEPTION)을 구동시켜라.
       end if;
       
       v_length := length(p_passwd);
       
       if( v_length < 5 OR v_length > 20 ) then
          RAISE error_insert; -- 사용자가 정의하는 예외절(EXCEPTION)을 구동시켜라.
       else
           for i in 1..v_length loop
               v_ch := substr(p_passwd, i, 1);
               
               if (v_ch between 'a' and 'z' OR v_ch between 'A' and 'Z') then -- 영문자라면?
                   v_flag_alphabet := 1;
               elsif (v_ch between '0' and '9') then -- 숫자라면
                   v_flag_number := 1;
               else -- 특수문자라면
                   v_flag_special := 1;
               
               end if;
           end loop;
           
           if(v_flag_alphabet * v_flag_number * v_flag_special = 1) then
               insert into tbl_member_test1(userid, passwd, name) values(p_userid, p_passwd, p_name);
           else
               RAISE error_insert; -- 사용자가 정의하는 예외절(EXCEPTION)을 구동시켜라.
           end if;
       
       end if;
       
       
       exception
            when error_dayTime then
                 raise_application_error(-20002, '영업시간(월~금 14:00 ~ 16:59:59 까지) 아니므로 입력불가함!!');
          
            when error_insert then
                 raise_application_error(-20003, '암호는 최소 5글자 이상이면서 영문자 및 숫자 및 특수기호가 혼합되어져야 합니다.');
 
  end pcd_tbl_member_test1_insert;
  -- Procedure PCD_TBL_MEMBER_TEST1_INSERT이(가) 컴파일되었습니다.
  
  exec pcd_tbl_member_test1_insert('eomjh','qwer0070$','엄정화');
  -- PL/SQL 프로시저가 성공적으로 완료되었습니다.
  
  exec pcd_tbl_member_test1_insert('leess','qwer0070$','이순신');
  -- ORA-20002: 영업시간(월~금 14:00 ~ 16:59:59 까지) 아니므로 입력불가함!!

  
  commit;
  
  select *
  from tbl_member_test1;
  
