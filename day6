    ------- **** Sub Query (서브쿼리)에서 사용되어지는 ANY , ALL 에 대해서 알아봅니다. **** --------
   /*
       Sub Query (서브쿼리) 에서 사용되어지는 ANY 는 OR 와 흡사하고, 
       Sub Query (서브쿼리) 에서 사용되어지는 ALL 은 AND 와 흡사하다.
   */
   -- ANY는 비교를 할때 선택한 범위 내 값마다 조건에 대해서 참, 거짓인지 비교 후 하나라도 참이면 나타냄
   -- ALL는 비교를 할때 선택한 범위 내 값마다 조건에 대해서 참, 거짓인지 비교 후 모두가 참이면 나타냄
   
   -- employees 테이블에서 salary 가 30번 부서에 근무하는 사원들의 salary 와 동일한 사원들만 추출하세요..
   -- 단, 출력시 30번 부서에 근무하는 사원은 제외합니다.
   
   select employee_id
        , first_name || ' ' || last_name
        , salary
        , department_id
   from employees
   where department_id != 30 AND
         salary in (select salary
                    from employees
                    where department_id = 30)
         order by 4, 3 desc;
   
   
    select employee_id
        , first_name || ' ' || last_name
        , salary
        , department_id
   from employees
   where department_id != 30 AND
         salary =ANY (select salary
                      from employees
                      where department_id = 30)
         order by 4, 3 desc;
   -- =ANY 는 IN과 흡사한 의미이다.
   -- ANY 장점 : 등호 및 부등호 사용가능
   
   /*
        기본급여(salary)가 제일 많은 사원만
        사원번호, 사원명, 기본급여(salary)를 나타내세요.
   */
   
   select employee_id
        , first_name || ' ' || last_name
        , salary
   from employees 
   where salary = (사원들 중 기본급여가 제일 큰 사원);
   
   select employee_id
        , first_name || ' ' || last_name
        , salary
   from employees 
   where salary = (select max(salary) from employees); 
   
   select employee_id
        , first_name || ' ' || last_name
        , salary
   from employees 
   where salary >=ALL (select salary from employees); 
   -- ALL 은 모든 것이 참일 때만 보여진다.
   
   /*
        기본급여(salary)가 제일 많은 사원을 제외한 나머지 사원들만
        사원번호, 사원명, 기본급여(salary)를 나타내세요.
   */
    
    select employee_id
         , first_name || ' ' || last_name
         , salary
    from employees 
    where salary != (select max(salary) from employees); 
    
    select employee_id
         , first_name || ' ' || last_name
         , salary
    from employees 
    where salary < (select max(salary) from employees); 
    
    -- OR 는 참이 1개만 포함되어 있어도 참이다.
    select employee_id
         , first_name || ' ' || last_name
         , salary
         , department_id
    from employees 
    where salary <ANY (select max(salary) from employees);  -- 자동으로  salary 컬럼에 대해 오름차순으로 정렬되어져 나온다.
    /*
        salary <(24000
                 17000
                  9000
                  ....
                  2100)
    */
    
    
    
    /*
        commission_pct가 제일 많은 사원만
        사원번호, 사원명, commission_pct를 나타내세요.
    */
    
    from employees
    where commission_pct = (commission_pct 가 제일 큰 값);
    
    
    select employee_id
         , first_name || ' ' || last_name
         , commission_pct
         , department_id
    from employees
    where commission_pct = (select max(commission_pct) from employees);
    -- 145	John 0.4	80
    
    select employee_id, first_name, commission_pct, department_id
    from employees
    where commission_pct >=ALL (select commission_pct from employees);
    -- 촤대치(0.4)와 NULL을 비교했을 때 비교할 수 없기 때문에 아무것도 나오지 않음.
    -- *** Sub Query 절에서 사용하는 ALL 은 사용시 주의를 요한다.
    --     Sub Query 절에서 Select 되어지는 결과물에 NULL 이 존재하지 않도록 만들어야 한다.
    
    
    select employee_id, first_name, commission_pct, department_id
    from employees
    where commission_pct >=ALL (select commission_pct from employees
                                where commission_pct is not null);
    -- 145	John 0.4	80
    -- 위처럼 Sub Query 절에서 Select 되어지는 결과물에 NULL 이 존재하지 않도록 만들어야 한다.
    
    /*
        commission_pct가 제일 많은 사원을 제외한 나머지 사원들만
        사원번호, 사원명, commission_pct를 나타내세요.
    */
    
    select employee_id
         , first_name || ' ' || last_name
         , commission_pct
         , department_id
    from employees
    where commission_pct != (select max(commission_pct) from employees);
    -- 34명 출력됨(null 인 사원들이 안나옴)
    
    select employee_id
         , first_name || ' ' || last_name
         , commission_pct
         , department_id
    from employees
    where commission_pct < (select max(commission_pct) from employees);
    -- 34명 출력됨(null 인 사원들이 안나옴)
    
    select employee_id
         , first_name || ' ' || last_name
         , commission_pct
         , department_id
    from employees
    where commission_pct <ANY (select max(commission_pct) from employees);
    -- NULL
    -- 34명 출력됨.
    -- 자동으로 commission_pct 컬럼에 대해 오름차순으로 정렬되어져 나온다.
    

    ------ ===== *** Pairwise(쌍) Sub Query *** ===== ------
    /*
        employees 테이블에서
        부서번호별로 salary 가 최대인 사원과    
        부서번호별로 salary 가 최소인 사원의 정보를
        부서번호, 사원번호, 사원명, 기본급여를 나타내세요..
    */
    
    select department_id, salary
    from employees
    order by 1,2;
    
    
    /*
        원하는 값
        -------------------------------
        department_id       salary
        -------------------------------
         10                   4400
         20	                  6000
         20	                  13000
         ...
    */
    select department_id as 부서번호
         , employee_id as 사원번호
         , first_name || ' ' || last_name as 이름
         , salary as 기본급여
    from employees
    where (department_id, salary) in (select department_id, min(salary)
                                      from employees
                                      group by department_id)
           or
          (department_id, salary) in (select department_id, max(salary)
                                      from employees
                                      group by department_id)
    order by 1, 4;
    -- (department_id, salary)처럼 괄호를 쳐놓으면 하나의 쌍으로 보는 것임.
    
    
    
    select department_id as 부서번호
         , employee_id as 사원번호
         , first_name || ' ' || last_name as 이름
         , salary as 기본급여
    from employees
    where (nvl(department_id, -9999), salary) in (select nvl(department_id, -9999), min(salary)
                                      from employees
                                      group by department_id)
           or
          (nvl(department_id, -9999), salary) in (select nvl(department_id, -9999), max(salary)
                                      from employees
                                      group by department_id)
    order by 1, 4;
    -- nvl처리를 해줘서 부서번호가 없는 Kimberely Grant도 나오게끔
    -- 어디서 null이 나오는지 파악 후 대처를 해야 함.
    
    
    select department_id, min(salary)
    from employees
    group by department_id;
    
    select department_id, max(salary)
    from employees
    group by department_id;
    
    
    
    --------- ===== **** 상관서브쿼리(== 서브상관쿼리) ****  ===== ---------    
   /*
      상관서브쿼리 이라함은 Main Query(== 외부쿼리)에서 사용된 테이블(뷰)에 존재하는 컬럼이
      Sub Query(== 내부쿼리)의 조건절(where절, having절)에 사용되어질때를 
      상관서브쿼리(== 서브상관쿼리)라고 부른다.
   */
   
   -- employees 테이블에서 기본급여에 대해 전체등수 및 부서내등수를 구하세요.
   -- 첫번째 방법은 rank() 함수를 사용하여 구해본다.
   
   select department_id AS 부서번호
        , employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , salary AS 기본급여
        , rank() over( order by salary desc) AS 전체등수 
        , rank() over( partition by department_id order by salary desc )AS 부서내등수
   from employees
   order by 부서번호, 기본급여 desc;
   
   
   -- employees 테이블에서 기본급여에 대해 전체등수 및 부서내등수를 구하세요.
   -- 두번쨰 방법은 count(*) 함수와 상관서브쿼리를 사용하여 구해본다.
   
   
   select salary
   from employees
   order by salary desc;
   
   -- 자신의 급여가 14000 이라면 몇등일까?
   select count(*) + 1 AS 등수
   from employees
   where salary > 14000;
   -- 나보다 위에 N명 있으니 내 등수는 N+1
   
   update employees set department_id = null AND
          where departmemt_id = 100;
   
      select department_id AS 부서번호
        , employee_id AS 사원번호
        , first_name || ' ' || last_name AS 사원명
        , salary AS 기본급여
   from employees
   
   select E.department_id AS 부서번호
        , E.employee_id AS 사원번호
        , E.first_name || ' ' || E.last_name AS 사원명
        , E.salary AS 기본급여
        , (select count(*) + 1 AS 등수
           from employees
           where salary > E.salary ) AS 전체등수 
        , (select count(*) + 1 AS 등수
           from employees
           where nvl(department_id, -9999) = nvl(E.department_id, -9999) and salary > E.salary  ) AS 부서내등수
           -- 부서번호가 NULL인 사람들도 등수를 정해야 하기 때문에 nvl 처리를 해줘야 함
   from employees E
   order by 부서번호, 기본급여 desc;
   -- employee 와 E 라는 다른 employee 테이블을 사용하여 구함
   -- 외부쿼리가 서브쿼리에 사용되어진 것을 상관서브쿼리라 한다.
   -- 바보처럼 함. 다시 해볼 것.
   
   rollback;
   
   -- 위에서 부서번호와 기본급여를 select문에서 빼보자.
   select E.employee_id AS 사원번호
        , E.first_name || ' ' || E.last_name AS 사원명
        , (select count(*) + 1 AS 등수
           from employees
           where salary > E.salary ) AS 전체등수 
        , (select count(*) + 1 AS 등수
           from employees
           where nvl(department_id, -9999) = nvl(E.department_id, -9999) and salary > E.salary  ) AS 부서내등수
   from employees E;
   -- 이미 employees와 E.employee에 값이 있으므로 select에서 빼도 상관없이 결과가 나온다.
   
   ----- === *** Sub Query 를 사용하여 테이블을 생성할 수 있습니다. *** === ------
   
   create table TBL_EMPLOYEES_3060
   as
   select department_id
        , employee_id
        , first_name || ' ' || last_name AS ENAME
        , nvl(salary + (salary * commission_pct), salary) AS MONTHSAL
        , case when substr(jubun, 7, 1) in('1','3') then '남' else '여' end AS GENDER
        , jubun
   from employees
   where department_id in (30, 60);
   
    ----- === *** employees 테이블을 가지고 데이터 없이
    --            employees 테이블의 구조만 동일한 tbl_employees_sub 이라는
    --            테이블을 생성하겠습니다. *** === -----
    
    
    create table tbl_employees_sub
    as
    select * 
    from employees
    where 1=2;
    -- TABLE tbl_employees_sub이 생성되었습니다.
    
    select * from tab;
    
    select *
    from TBL_EMPLOYEES_SUB;
    
    
    ---- **** !!!! 필수로 꼭 알아두시길 바랍니다. !!!! **** ----
    -- === 상관서브쿼리(=서브상관쿼리)를 사용한 UPDATE 처리하기 === --
    
    /*
        회사에 입사하여 delete 또는 update 를 할 때 반드시 해당 테이블을 백업해두고
        그 후에 작업을 해야 한다!!! 백업본이 있으면 실수를 하더라도 복구가 가능하기 때문이다.
    */
    
    create table tbl_employees_backup_220111
    as
    select *
    from employees;
    -- Table TBL_EMPLOYEES_BACKUP_220111이(가) 생성되었습니다.

    select *
    from tbl_employees_backup_220111;
    
    update employees set first_name = '순신', last_name = '이';
    -- 107개 행 이(가) 업데이트되었습니다.
    
    commit;
    -- 커밋 완료.
    
    select *
    from employees;
    -- 모든 이름과 성이 이순신이됨..
    
    update employees E set first_name = ( select first_name
                                          from tbl_employees_backup_220111
                                          where employee_id = E.employee_id )
                       , last_name = ( select last_name
                                       from tbl_employees_backup_220111
                                       where employee_id = E.employee_id);
    -- 메인쿼리를 E라는 이름으로 설정한 뒤 서브쿼리 를 이용하여 tbl_employees_backup_220111 테이블 E 위치에 있는 first_name, last_name 을
    -- E에다 업데이트한다.
    -- 107개 행 이(가) 업데이트되었습니다.
    -- 위와 같이 올바르게 복구되기 위에서는 서브쿼리 절의 where에서 사용된
    -- employee_id 컬럼은 고유한 값만 가지는 컬럼이어야 한다. (고유한 값 : 사원번호 100번은 한 번만 나온다. only one)

    select *
    from employees;
    
    commit;
    -- 커밋 완료.
    
    
    ----- === *** Sub Query 절을 사용하여 데이터를 입력(insert)할 수 있습니다. *** === ------
    select *
    from TBL_EMPLOYEES_3060;
    
    insert into TBL_EMPLOYEES_3060
    select department_id
        , employee_id
        , first_name || ' ' || last_name AS ENAME
        , nvl(salary + (salary * commission_pct), salary) AS MONTHSAL
        , case when substr(jubun, 7, 1) in('1','3') then '남' else '여' end AS GENDER
        , jubun
   from employees
   where department_id in (40, 50)
   order by 1;
   -- 46개 행 이(가) 삽입되었습니다.
   -- 삽입할 땐 반드시 순서를 맞춰서 삽입해야 함!!!!!!!!
   
   select *
   from TBL_EMPLOYEES_3060;
   -- 이전엔 30, 60만 있었는데 삽입 이후엔 40, 60도 추가됨.
   
   rollback;
   
   select *
   from TBL_EMPLOYEES_3060;
    
    
    ----- === *** Sub Query 절을 사용하여 데이터를 수정(update)할 수 있습니다. *** === ------

    update TBL_EMPLOYEES_3060 set monthsal = ( select trunc( AVG(nvl(salary + (salary * commission_pct), salary)) )
                                               from employees
                                               where department_id = 50
                                             )
    where department_id = 30;
    -- 6개 행 이(가) 업데이트되었습니다.
    
    select *
    from TBL_EMPLOYEES_3060;


    ----- === *** Sub Query 절을 사용하여 데이터를 삭제(delete)할 수 있습니다. *** === ------

    delete from TBL_EMPLOYEES_3060
    where department_id = ( select department_id
                            from employees
                            where employee_id = 118);
                            
    select *
    from TBL_EMPLOYEES_3060;
    
    rollback;
    
    
    
    
    --------------------------------------------------------------------------------------
    -- !!!!!! 아주 중요 ****** JOIN은 면접에 가면 무조건 물어본다 ******  !!!!!! --
               ------- ====== **** JOIN **** ====== --------
   /*
       JOIN(조인)은 테이블(뷰)과 테이블(뷰)을 합치는 것을 말하는데 
       행(ROW) 과 행(ROW)을 합치는 것이 아니라, 컬럼(COLUMN) 과 컬럼(COLUMN)을 합치는 것을 말한다.
       위에서 말한 행(ROW) 과 행(ROW)을 합치는 것은 UNION 연산자를 사용하는 것이다.
   
       -- 면접질문 : INNER JOIN(내부조인) 과 OUTER JOIN(외부조인)의 차이점에 대해 말해보세요.
       -- 면접질문 : JOIN 과 UNION 의 차이점에 대해서 말해보세요.
       
       
       A = {1, 2, 3}    원소가 3개
       B = {a, b}       원소가 2개
       
       A ⊙ B = { (1,a), (1,b)
                 ,(2,a), (2,b)
                 ,(3,a), (3,b) }
                 
       데카르트곱(수학)  ==> 원소의 곱 :   3 * 2 = 6개(모든 경우의 수)
       --> 수학에서 말하는 데카르트곱을 데이터베이스에서는 Catersian Product 라고 부른다.
       
       
       JOIN  =>  SQL 1992 CODE 방식  -->  테이블(뷰) 과 테이블(뷰) 사이에 콤마(,)를 찍어주는 것.  
                                         콤마(,)를 찍어주는 것을 제외한 나머지 문법은 데이터베이스 밴더(회사) 제품마다 조금씩 다르다.   
       
       JOIN  =>  SQL 1999 CODE 방식(ANSI) --> 테이블(뷰) 과 테이블(뷰) 사이에 JOIN 이라는 단어를 넣어주는 것.
                                             ANSI(표준화) SQL
   */
   
   select *
   from employees;
   
   select count(*)
   from employees; -- 107개행
   
   select *
   from departments;
   
   select count(*)
   from departments; -- 27개 행
   
   select *
   from employees , departments; --> SQL 1992 CODE 방식, Catersian Product
   
   select count(*)
   from employees , departments; --> SQL 1992 CODE 방식, 2889개 행 (107 * 27)
   
   
   select *
   from employees CROSS JOIN departments; --> SQL 1999 CODE 방식, Catersian Product
   
   select count(*)
   from employees CROSS JOIN departments; --> SQL 1999 CODE 방식, 2889개 행 (107 * 27)
   
   /*
      1. CROSS JOIN 은 프로야구를 예로 들면 10개팀이 있는데 
         각 1팀당 경기를 몇번해야 하는지 구할때 쓰인다. 1팀당 모든 팀과 경기를 펼쳐야 한다. 
         
      2. CROSS JOIN 은 그룹함수로 나온 1개의 행을 가지고 어떤 데이터 값을 얻으려고 할때 사용된다. 
  */
  
  -- [ CROSS JOIN 사용 예 ]
  /*
      사원번호    사원명    부서번호    기본급여    모든사원들의기본급여평균    기본급여평균과의차액    
      이 나오도록 하세요..
  */
   
   select employee_id AS 사원번호
         , first_name || ' ' || last_name AS 사원명
         , department_id AS 부서번호
         , salary AS 기본급여
         , avg(salary) AS 기본급여평균
   from employees; -- 오류 기본급여평균만 1행, 나머지 107행
   
   
   
   
   
   select employee_id AS 사원번호
         , first_name || ' ' || last_name AS 사원명
         , department_id AS 부서번호
         , salary AS 기본급여
   from employees;
   
   
   select trunc(avg(salary)) AS 기본급여평균
   from employees;
   
   -- (사원번호     사원명     부서번호    기본급여) + (기본급여평균)
   select *
   from
   (
   select employee_id AS 사원번호
         , first_name || ' ' || last_name AS 사원명
         , department_id AS 부서번호
         , salary AS 기본급여
   from employees
   ---- (사원번호     사원명     부서번호    기본급여)
   ) A
   ,
   -- +
   (
   select trunc(avg(salary)) AS 기본급여평균
   from employees
   ) B
   -- (기본급여평균)
   
   
   
   
   -- (사원번호     사원명     부서번호    기본급여) + (기본급여평균) SQL 1992 방식
   select A.employee_id AS 사원번호
        , A.FULLNAME AS 사원명
        , A.department_id AS 부서번호
        , A.salary AS 기본급여
        , B.AVG_SALARY AS 기본급여평균
        , (A.salary - B.AVG_SALARY) AS "평균차액"
   from
   (
   select employee_id
         , first_name || ' ' || last_name AS FULLNAME
         , department_id
         , salary 
   from employees
   ) A
   ,
   (
   select trunc(avg(salary)) AS AVG_SALARY
   from employees
   ) B
   
   
   
   -- (사원번호     사원명     부서번호    기본급여) + (기본급여평균) SQL 1999 방식   
   select A.employee_id AS 사원번호
        , A.FULLNAME AS 사원명
        , A.department_id AS 부서번호
        , A.salary AS 기본급여
        , B.AVG_SALARY AS 기본급여평균
        , (A.salary - B.AVG_SALARY) AS "평균차액"
   from
   (
   select employee_id
         , first_name || ' ' || last_name AS FULLNAME
         , department_id
         , salary 
   from employees
   ) A
   CROSS JOIN
   (
   select trunc(avg(salary)) AS AVG_SALARY
   from employees
   ) B
   
   
   ---- **** EQUI JOIN (SQL 1992 CODE 방식) **** ----
    /*
        [EQUI JOIN 예]
        
        부서번호    부서명     사원번호    사원명     기본급여
        이 나오도록 하세요...
    */
    
    /*   부서번호                       부서명         사원번호    사원명     기본급여
       -----------                     ------       ------------------------------
       departments.department_id       departments             employees
       employees.department_id
    */
    
    
    select *
    from employees , departments
    where employees.department_id = departments.department_id; -- 조인조건절(SQL 1992)
    
    select *
    from employees E, departments D
    where E.department_id = D.department_id; -- 조인조건절(SQL 1992)
    -- E.department_id(부서번호) 값이 NULL 인 것은 출력되지 않는다.
    
    select *
    from employees E, departments D
    where E.department_id(+) = D.department_id; -- 조인조건절(SQL 1992)
    -- (+)는 (+)가 없는 쪽의 테이블인 departments D 테이블의 모든 행들을 먼저 출력해준다.
    -- ==> 즉, 107개 행을 모두 출력한 후 조인조건절에 들어간다.
    -- E.department_id(부서번호) 값이 NULL 인 것도 출력된다.
    
    
    select *
    from employees E, departments D
    where E.department_id = D.department_id(+); -- 조인조건절(SQL 1992)
    -- (+)는 (+)가 없는 쪽의 테이블인 employees E 테이블의 모든 행들을 먼저 출력해준다.
    -- ==> 즉, 27개 행을 모두 출력한 후 조인조건절에 들어간다.
    -- E.department_id(부서번호) 값이 NULL 인 것은 출력되지 않는다.
    
    select *
    from employees E, departments D
    where E.department_id(+) = D.department_id;(+) 
    -- 양쪽 모두 (+) 은 없다. --> 1999 SQL 코드인 FULL OUTER JOIN 사용
    
    
    ---- **** INNER JOIN[내부조인] (SQL 1999 CODE 방식) **** ----
    -- NULL 빼겠다!

    select *
 -- from employees E INNER JOIN departments D
    from employees E  JOIN departments D -- INNER 는 생략 가능
    ON E.department_id = D.department_id; -- 조인조건절(SQL 1999)
    
    
    ---- **** LEFT (OUTER) JOIN[외부조인] (SQL 1999 CODE 방식) **** ----
    
    select *
 -- from employees E LEFT OUTER JOIN departments D
    from employees E LEFT JOIN departments D -- OUTER 는 생략 가능
    ON E.department_id = D.department_id; -- 조인조건절(SQL 1999)
    -- LEFT OUTER JOIN은 이 글자를 기준으로 하여 왼쪽인 employees E 테이블의 모든 행들을 먼저 출력해준다.
    -- ==> 즉, 107개 행을 모두 출력한 후 조인조건절에 들어간다.
    -- E.department_id(부서번호) 값이 NULL 인 것도 출력된다.
    
    ---- **** RIGHT (OUTER) JOIN[외부조인] (SQL 1999 CODE 방식) **** ----

    select *
 -- from employees E RIGHT OUTER JOIN departments D
    from employees E RIGHT JOIN departments D -- OUTER 는 생략 가능
    ON E.department_id = D.department_id; -- 조인조건절(SQL 1999)
    -- RIGHT OUTER JOIN은 이 글자를 기준으로 하여 오른쪽 테이블인 departments D 테이블의 모든 행들을 먼저 출력해준다.
    -- ==> 즉, 27개 행을 모두 출력한 후 조인조건절에 들어간다.
    -- E.department_id(부서번호) 값이 NULL 인 것은 출력되지 않는다.
    
    
    ---- **** FULL (OUTER) JOIN[외부조인] (SQL 1999 CODE 방식) **** ----

    select *
 -- from employees E FULL OUTER JOIN departments D
    from employees E FULL JOIN departments D -- OUTER 는 생략 가능
    ON E.department_id = D.department_id; -- 조인조건절(SQL 1999)
    -- FULL OUTER JOIN은 이 글자를 기준으로 하여 양쪽 employees E 테이블과 departments D 테이블의 모든 행들을 먼저 출력해준다.
    -- ==> 즉, 107행과 27개 행을 모두 출력한 후 조인조건절에 들어간다.
    -- E.department_id(부서번호) 값이 NULL 인 것도 출력되고
    -- 페이퍼 부서인 부서번호 120번 부터 270번까지도 출력된다.
